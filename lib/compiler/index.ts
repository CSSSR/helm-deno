import * as path from "https://deno.land/std@0.70.0/path/mod.ts"
import * as fs from "https://deno.land/std@0.70.0/fs/mod.ts"
import { checkChartPath } from "../common/helm.ts"

const kubertaData = `
kind: KubertaData
spec:
  release: | {{- .Release | toYaml | nindent 4 }}
  values: | {{- .Values | toYaml | nindent 4 }}
  jsTemplate: | {{- .Files.Get "deno.autogenerated.js" | nindent 4 }}
`

const helmignore = `
# Patterns to ignore when building packages.
# This supports shell glob matching, relative path matching, and
# negation (prefixed with !). Only one pattern per line.
.DS_Store
# Common VCS dirs
.git/
.gitignore
.bzr/
.bzrignore
.hg/
.hgignore
.svn/
# Common backup files
*.swp
*.bak
*.tmp
*.orig
*~
# Various IDEs
.project
.idea/
*.tmproj
.vscode/

# ---
Makefile
*.dec

# Deno
deno-templates/
.snapshots/
example-values/
`

export async function compileDenoChart(chartPath: string) {
  const denoPath = path.join(Deno.env.get("HELM_PLUGIN_DIR") || "", "bin/deno")

  await checkChartPath(chartPath)
  await fs.ensureDir(path.join(chartPath, "templates"))

  await Deno.writeFile(
    path.join(chartPath, "templates/kuberta-data.autogenerated.yaml"),
    new TextEncoder().encode(kubertaData)
  )

  await Deno.writeFile(
    path.join(chartPath, ".helmignore"),
    new TextEncoder().encode(helmignore)
  )

  const importMapPath =
    Deno.env.get("IMPORT_MAP_PATH") ||
    path.join(Deno.cwd(), "tools/import_map.json")

  const cmd = Deno.run({
    cmd: [
      denoPath,
      "bundle",
      `--importmap`,
      importMapPath,
      "--unstable",
      path.join(chartPath, "deno-templates/index.ts"),
    ],
    stdout: "piped",
    stderr: "piped",
  })

  const output = await cmd.output()
  const error = await cmd.stderrOutput()
  const status = await cmd.status()

  if (!status.success) {
    const errorStr = new TextDecoder().decode(error)
    console.log(errorStr)
    Deno.exit(status.code)
  }

  const compiledFile = new TextDecoder().decode(output)

  cmd.close()

  await Deno.writeFile(
    path.join(chartPath, "deno.autogenerated.js"),
    new TextEncoder().encode(`// deno-fmt-ignore-file\n${compiledFile}`)
  )
}
